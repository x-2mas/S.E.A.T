
#
#
# S.E.A.T | player_interface 
# Handles player-S.E.A.T interactions
#
#



/// As all players who selected an option from menu page 1, 
asat('@a[scores={x_SEAT_MENU=101..199}]'){

    /// Execute menu option
    if('score @s x_SEAT_MENU matches 111'){
        /data modify storage x_seat flags.physics set value 0
    }
    if('score @s x_SEAT_MENU matches 112'){
        /data modify storage x_seat flags.physics set value 1
    }
    if('score @s x_SEAT_MENU matches 121'){
        /data modify storage x_seat flags.rotationLock set value 0
    }
    if('score @s x_SEAT_MENU matches 122'){
        /data modify storage x_seat flags.rotationLock set value 1
    }
    if('score @s x_SEAT_MENU matches 131'){
        /data modify storage x_seat flags.onlyIfSneaking set value 0
    }
    if('score @s x_SEAT_MENU matches 132'){
        /data modify storage x_seat flags.onlyIfSneaking set value 1
    }

    /// Restore menu to page 1
    /scoreboard players set @s x_SEAT_MENU 100
}


/// As all players who selected an option from menu page 2, 
asat('@a[scores={x_SEAT_MENU=201..299}]'){

    /// Execute menu option
    if('score @s x_SEAT_MENU matches 211'){
        /data modify storage x_seat flags.bounceOffFloor set value 0
    }
    if('score @s x_SEAT_MENU matches 212'){
        /data modify storage x_seat flags.bounceOffFloor set value 1
    }
    if('score @s x_SEAT_MENU matches 221'){
        /data modify storage x_seat flags.onlySitDown set value 0
    }
    if('score @s x_SEAT_MENU matches 222'){
        /data modify storage x_seat flags.onlySitDown set value 1
    }
    if('score @s x_SEAT_MENU matches 231'){
        /data modify storage x_seat flags.freezeRideOnAdjust set value 0
    }
    if('score @s x_SEAT_MENU matches 232'){
        /data modify storage x_seat flags.freezeRideOnAdjust set value 1
    }

    /// Restore menu to page 2
    /scoreboard players set @s x_SEAT_MENU 200
}


/// As all players who selected an option from menu page 3, 
asat('@a[scores={x_SEAT_MENU=301..399}]'){

    /// Execute menu option
    if('score @s x_SEAT_MENU matches 311'){
        /data modify storage x_seat flags.fallDamage set value 0
    }
    if('score @s x_SEAT_MENU matches 312'){
        /data modify storage x_seat flags.fallDamage set value 1
    }
    if('score @s x_SEAT_MENU matches 321'){
        /data modify storage x_seat flags.blockInventory set value 0
    }
    if('score @s x_SEAT_MENU matches 322'){
        /data modify storage x_seat flags.blockInventory set value 1
    }
    if('score @s x_SEAT_MENU matches 331'){
        /data modify storage x_seat flags.showPrompts set value 0
    }
    if('score @s x_SEAT_MENU matches 332'){
        /data modify storage x_seat flags.showPrompts set value 1
    }

    /// Restore menu to page 3
    /scoreboard players set @s x_SEAT_MENU 300
}


/// As all players who selected an option from anywhere in the menu, 
asat('@a[scores={x_SEAT_MENU=100..399}]'){

    /// Clear chat
    /tellraw @s "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    
    /// Run menu
    /function x_seat:menu

    /// Break menu loop
    /scoreboard players reset @s x_SEAT_MENU
}


/// As all players who have selected to close/clear the menu, 
asat('@a[scores={x_SEAT_MENU=400}]'){

    /// Clear chat
    /tellraw @s "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"

    /// Break menu loop
    /scoreboard players reset @s x_SEAT_MENU
}



/// As all unseated players not holding anything in their main hand,
asat('@a[tag=!x_MAY_SIT,nbt=!{RootVehicle:{Entity:{Tags:[x_SEAT_NS,x_SEAT]}}}]') {


    /// If player Y-Rotation > 80 (looking down)
    if('entity @s[x_rotation=80..90]') {

        /// If main-hand not clear and prompts are ON
        if('entity @s[nbt={SelectedItem:{}}]' && 'data storage x_seat flags{showPrompts:1}'){
            
            /// Display an action-bar prompt with sitting instructions
            /title @s actionbar ["",{"text":"You must clear your main-hand before sitting!"}]   
            
            /// Tag player for C.O.R.E to clear action-bar prompt          
            /tag @s add x_CLEAR_ABTITLE

            /// Request C.O.R.E action-bar clear
            /data modify storage x_core flags merge value {clearABTitle:1}     
        }


        /// If main-hand clear,
        if('entity @s[nbt=!{SelectedItem:{}}]'){
        

            /// If prompts and only-if-sneaking are On and seat not nearby,
            if('data storage x_seat flags{showPrompts:1}' && 'data storage x_seat flags{onlyIfSneaking:1}' && !'entity @e[distance=..2,tag=x_SEAT_NS,tag=x_SEAT_SURFACE,tag=!x_SEAT_OCCUPIED]'){

                /// Display an action-bar prompt with sitting instructions
                /title @s actionbar ["",{"text":"Hold "},{"keybind":"key.sneak","color":"gold","bold":true},{"text":" to begin sitting"}]  
                
                /// Tag player for C.O.R.E to clear action-bar prompt          
                /tag @s add x_CLEAR_ABTITLE

                /// Request C.O.R.E action-bar clear
                /data modify storage x_core flags merge value {clearABTitle:1}     
            }


            /// If only-if-sneaking is Off OR if they have been sneaking for a while
            if('data storage x_seat flags{onlyIfSneaking:0}' || 'score @s x_SNEAK_TIME matches 5..'){

                /// Add S.E.A.T namespace tag (helps prevent tag conflicts with other packs)
                /tag @s add x_SEAT_NS
                
                /// Player tagged as potential sitter
                /tag @s add x_MAY_SIT
            }
        }
    }
}





/// As all potential sitters, one by one
asat('@a[tag=x_SEAT_NS,tag=x_MAY_SIT,tag=!x_MAY_SIT_SKIP,limit=1]') {


    /// If not assigned an EID
    if(!'score @s x_EID matches 1..'){

        /// Tag as 'EID added by seat' (indicates EID was added by this pack)
        /tag @s add x_EID__SEAT

        /// Queue player for an EID tag
        /scoreboard players add @s x_EID__T 1

        /// Tag as having EID
        /tag @s add x_EID
        
        /// Assign EID
        /function x_core:assign_eid
    }



    /// As all un-occupied seat bases with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=!x_SEAT_OCCUPIED,tag=x_SEAT_BASE]'), if('score @s x_SEAT_ID = @a[tag=x_MAY_SIT,tag=!x_MAY_SIT_SKIP,limit=1,sort=nearest] x_EID'){

        /// Tag as player's seat base
        /tag @s add x_SEAT_PLAYER_BASE
    }



    /// If player's seat missing, 
    if(!'entity @e[tag=x_SEAT_NS,tag=x_SEAT_PLAYER_BASE]') {

        /// If only-if-sneaking is disabled or else, if player is sneaking
        if('data storage x_seat flags{onlyIfSneaking:0}'){

            /// Create a new S.E.A.T
            /function x_seat:create_seat
        }  

        /// If only-if-sneaking is disabled or else, if player is sneaking
        if('data storage x_seat flags{onlyIfSneaking:1}' && 'score @s x_SNEAK_TIME matches 1..'){

            /// Create a new S.E.A.T
            /function x_seat:create_seat
        }
    }



    /// Teleport player's S.E.A.T below player, positioned so that S.E.A.T surface is slightly below player's butt and facing straight
    rotated('~ 0'){
        /tp @e[tag=x_SEAT_NS,tag=x_SEAT_PLAYER_BASE,sort=nearest,limit=1] ~ ~-1.4 ~ facing ^ ^-1.6 ^2
    }


    /// If only-if-sneaking is off,
    if('data storage x_seat flags{onlyIfSneaking:0}') { 

        /// Start (or extend) a auto-kill timeout on player's seat
        /scoreboard players set @e[tag=x_SEAT_NS,tag=x_SEAT_PLAYER_BASE,sort=nearest,limit=1] x_SEAT_TICK 40
    }


    /// If player is looking down and prompts are ON,
    if('entity @s[x_rotation=80..90]' && 'data storage x_seat flags{showPrompts:1}'){

        /// If only-if-sneaking is Off and seat nearby
        if('data storage x_seat flags{onlyIfSneaking:0}' && 'entity @e[distance=..2,tag=x_SEAT_NS,tag=x_SEAT_SURFACE,tag=!x_SEAT_OCCUPIED]'){

            /// Display an action-bar prompt with sitting instructions
            /title @s actionbar ["",{"text":"Press "},{"keybind":"key.use","color":"gold","bold":true},{"text":" to sit"}]      
        }
        
        /// If only-if-sneaking is On and player hasn't been sneaking and seat not nearby
        if('data storage x_seat flags{onlyIfSneaking:1}' && 'score @s x_SNEAK_TIME matches ..19' && !'entity @e[distance=..2,tag=x_SEAT_NS,tag=x_SEAT_SURFACE,tag=!x_SEAT_OCCUPIED]'){

            /// Display an action-bar prompt with sitting instructions
            /title @s actionbar ["",{"text":"Hold "},{"keybind":"key.sneak","color":"gold","bold":true},{"text":" to begin sitting"}]  
        }
        
        /// If only-if-sneaking is On and player has been sneaking for a while and seat nearby
        if('data storage x_seat flags{onlyIfSneaking:1}' && 'score @s x_SNEAK_TIME matches 20..' && 'entity @e[distance=..2,tag=x_SEAT_NS,tag=x_SEAT_SURFACE,tag=!x_SEAT_OCCUPIED]'){

            /// Display an action-bar prompt with sitting instructions
            /title @s actionbar ["",{"text":"Release "},{"keybind":"key.sneak","color":"gold","bold":true},{"text":" and quickly press "},{"keybind":"key.use","color":"gold","bold":true},{"text":" to sit"}]  
        }
        
        /// If main-hand not clear,
        if('entity @s[nbt={SelectedItem:{}}]'){
            
            /// Display an action-bar prompt with sitting instructions
            /title @s actionbar ["",{"text":"You must clear your main-hand before sitting!"}]   
        }
    }


    /// Remove player tag from its base
    /tag @e remove x_SEAT_PLAYER_BASE

    /// Skip this player and iterate over other potential sitters
    /tag @s add x_MAY_SIT_SKIP
}



/// If all potential sitters checked, reset skip tags
if(!'entity @a[tag=x_SEAT_NS,tag=x_MAY_SIT,tag=!x_MAY_SIT_SKIP]'){
    /tag @a remove x_MAY_SIT_SKIP
}





/// As all potential sitters
asat('@a[tag=x_SEAT_NS,tag=x_MAY_SIT,tag=!x_MAY_NOT_SIT]'){

    /// If only-if-sneaking is Off and player not looking down
    if('data storage x_seat flags{onlyIfSneaking:0}' && 'entity @s[x_rotation=-90..80]') {  
        
        /// Tag as no longer a potential sitter
        /tag @s add x_MAY_NOT_SIT
    }
    
    /// If only-if-sneaking is On and player isn't sneaking and no seat nearby
    if('data storage x_seat flags{onlyIfSneaking:1}' && 'score @s x_SNEAK_TIME matches 0' && !'entity @e[distance=..3,tag=x_SEAT_NS,tag=x_SEAT_SURFACE,tag=!x_SEAT_OCCUPIED]'){
        
        /// Tag as no longer a potential sitter
        /tag @s add x_MAY_NOT_SIT
    }
}





/// As all not-potential-sitters
asat('@a[tag=x_SEAT_NS,tag=x_MAY_NOT_SIT]'){
    

    /// If player didn't sit just now and prompts are ON
    if('entity @s[nbt=!{RootVehicle:{Entity:{Tags:[x_SEAT_NS,x_SEAT]}}},tag=!x_SEATED]' && 'data storage x_seat flags{showPrompts:1}'){

        /// Tag player for C.O.R.E to clear action-bar prompt          
        /tag @s add x_CLEAR_ABTITLE

        /// Request C.O.R.E action-bar clear
        /data modify storage x_core flags merge value {clearABTitle:1}     
    }


    /// If player didn't sit just now and no EID tag was added by this pack
    if('entity @s[nbt=!{RootVehicle: {Entity:{Tags:[x_SEAT_NS,x_SEAT]}}},tag=!x_SEATED,tag=x_EID__SEAT]'){

        /// Unqueue EID tag 
        /scoreboard players remove @s x_EID__T 1

        /// Remove seat EID 'added by seat' tag
        /tag @s remove x_EID__SEAT
    }
   

    /// Remove potential sitter tags    
    /tag @s remove x_MAY_SIT_SKIP
    /tag @s remove x_MAY_SIT
    /tag @s remove x_MAY_NOT_SIT

}





/// As players who are seated but not adjusting their seat,
asat('@a[tag=x_SEAT_NS,tag=x_SEATED,tag=!x_ADJUSTING_SEAT]'){ 

    /// Reset player seat clock
    /scoreboard players reset @s x_SEAT_TICK

    /// If player is looking down,
    if('entity @s[x_rotation=80..90]') {

        /// If prompts are on,
        if('data storage x_seat flags{showPrompts:1}') { 
            
            /// Display an action-bar prompt with instructions on how to start seat adjustment 
            /title @s actionbar ["",{"text":"Scroll Up/Down","color":"gold","bold":true},{"text":" rapidly to enter "},{"text":"S.E.A.T Adjustment","color":"green","bold":true},{"text":" mode"}]      
        }
            
        /// If entity not already tagged as scrollbar user
        if(!'entity @s[tag=x_SCROLLBAR__SEAT]'){
            
            /// Add S.E.A.T namespace tag (helps prevent tag conflicts with other packs)
            /tag @s add x_SEAT_NS
            
            /// Queue scrollbar tag
            /scoreboard players add @s x_SCROLLBAR__T 1

            /// Tag as scrollbar user
            /tag @s add x_SCROLLBAR

            /// Add seat scrollbar user 'added by seat' tag
            /tag @s add x_SCROLLBAR__SEAT
        }

        /// Tag as potential adjuster
        /tag @s add x_MAY_ADJUST_SEAT
    }
}





/// As players tagged as potential seat adjuster, taken one at a time
asat('@a[tag=x_SEAT_NS,tag=x_MAY_ADJUST_SEAT,tag=!x_MAY_ADJUST_SEAT_SKIP,limit=1]'){


    /// If player isn't looking down,
    if('entity @s[x_rotation=-90..80]') {
        
        /// If prompts are ON,
        if('data storage x_seat flags{showPrompts:1}'){

            /// Tag player for C.O.R.E to clear action-bar prompt          
            /tag @s add x_CLEAR_ABTITLE

            /// Request C.O.R.E action-bar clear
            /data modify storage x_core flags merge value {clearABTitle:1}  
        }
            
        /// Reset seat scroll tracking register
        /scoreboard players reset @s x_SEAT_SCROLLED

        /// If scrollbar user tag was added by this pack
        if('entity @s[tag=x_SCROLLBAR__SEAT]'){

            /// Unqueue scrollbar tag
            /scoreboard players remove @s x_SCROLLBAR__T 1
            
            /// Remove seat scrollbar user 'added by seat' tag
            /tag @s remove x_SCROLLBAR__SEAT
        }    

        /// Remove potential adjuster tag
        /tag @s remove x_MAY_ADJUST_SEAT
    }


    /// If player not scrolling,
    if('score @s x_SCROLL_DIR matches 0') {

        /// Decrement seat scroll tracking register by 1
        /scoreboard players remove @s x_SEAT_SCROLLED 1

    /// If player scrolling,
    } else {        
        
        /// Increment seat scroll tracking register by 2
        /scoreboard players add @s x_SEAT_SCROLLED 2
    }
    

    /// If seat scroll tracking register goes too low, 
    if('score @s x_SEAT_SCROLLED matches ..-1') {

        /// Bottom-clamp seat scroll tracking register 
        /scoreboard players reset @s x_SEAT_SCROLLED
    }


    /// If seat scroll tracking register goes too high, 
    if('score @s x_SEAT_SCROLLED matches 18..') {
        
        /// Set player seat clock to a small delay (breaks scrolling action)
        /scoreboard players set @s x_SEAT_TICK -20

        /// As all seat anchors with seat ID matching player,
        asat('@e[tag=x_SEAT_ANCHOR]'), if('score @s x_SEAT_ID = @a[tag=x_MAY_ADJUST_SEAT,tag=!x_MAY_ADJUST_SEAT_SKIP,limit=1,sort=nearest] x_EID'){

            /// Tag as being adjusted
            /tag @s add x_SEAT_ANCHOR_ADJUSTING
        }


        /// Tag player as adjusting seat
        /tag @s add x_ADJUSTING_SEAT   

        /// Remove potential adjuster tag
        /tag @s remove x_MAY_ADJUST_SEAT
    }


    /// Skip this player and iterate over other potential adjusters
    /tag @s[tag=x_MAY_ADJUST_SEAT] add x_MAY_ADJUST_SEAT_SKIP
}



/// If all potential adjusters checked, reset skip tags
if(!'entity @a[tag=x_SEAT_NS,tag=x_MAY_ADJUST_SEAT,tag=!x_MAY_ADJUST_SEAT_SKIP]'){
    /tag @a remove x_MAY_ADJUST_SEAT_SKIP
}





/// As all players tagged as adjusting, taken one by one
asat(@a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1]){



    /// Reset seat scroll tracking register
    /scoreboard players reset @s x_SEAT_SCROLLED

    /// If prompts are on,
    if('data storage x_seat flags{showPrompts:1}') { 

        /// Display an action-bar prompt with seat adjustment instructions
        /title @s actionbar ["",{"text":"[S.E.A.T Adjustment Mode] ","color":"green","bold":true},{"text":"Look", "color":"gold", "bold":true},{"text":": Set Direction  ","color":"white"},{"text":"Scroll","color":"gold","bold":true},{"text":": Move  ","color":"white"},{"text":"Wait","color":"gold","bold":true},{"text":": Exit","color":"white"}]      
    }



    /// As all un-occupied seat bases with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=x_SEAT_OCCUPIED,tag=x_SEAT_BASE]'), if('score @s x_SEAT_ID = @a[tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_EID'){

        /// Tag as player's seat base
        /tag @s add x_SEAT_PLAYER_BASE
    }



    /// If player scrolls forward
    if('score @s x_SEAT_TICK matches 0..' && 'score @s x_SCROLL_DIR matches 1') {

        /// As player's base and rotated as player,
        asat('@e[tag=x_SEAT_PLAYER_BASE,limit=1,sort=nearest]'), rotated('as @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1]') {

            /// Teleport base slight forward in the direction player is looking
            /tp @s ^ ^ ^-0.1
        }

        /// Reset player seat clock
        /scoreboard players reset @s x_SEAT_TICK
    }


    /// If player scrolls backward
    if('score @s x_SEAT_TICK matches 0..' && 'score @s x_SCROLL_DIR matches -1') {

        /// As player's base and rotated as player,
        asat('@e[tag=x_SEAT_PLAYER_BASE,limit=1,sort=nearest]'), rotated('as @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1]') {

            /// Teleport base slight backward in the direction player is looking
            /tp @s ^ ^ ^0.1
        }

        /// Reset player seat clock
        /scoreboard players reset @s x_SEAT_TICK
    }
        


    /// As all seat anchors with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=x_SEAT_ANCHOR]'), if('score @s x_SEAT_ID = @a[tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_EID'){

        /// Get anchor's current X position
        /execute store result score @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R0 run data get entity @s Pos[0] 1000000

        /// Get anchor's current Y position
        /execute store result score @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R1 run data get entity @s Pos[1] 1000000

        /// Get anchor's current Z position
        /execute store result score @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R2 run data get entity @s Pos[2] 1000000
    }
    


    /// As all seat bases with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=x_SEAT_OCCUPIED,tag=x_SEAT_BASE]'), if('score @s x_SEAT_ID = @a[tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_EID'){


        /// Temporarily stop rotating with anchor
        /tag @s remove x_ADJUST_ROTATE


        /// Rotate S.E.A.T with player
        /data modify entity @s Rotation[0] set from entity @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] Rotation[0]


        /// Compute X-offset from anchor and base positions
        /execute store result score @s x_R0 run data get entity @s Pos[0] 1000000
        /scoreboard players operation @s x_R0 -= @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R0
        /scoreboard players operation @s x_ATTACH_X = @s x_R0

        /// Compute Y-offset from anchor and base positions
        /execute store result score @s x_R0 run data get entity @s Pos[1] 1000000
        /scoreboard players operation @s x_R0 -= @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R1
        /scoreboard players operation @s x_ATTACH_Y = @s x_R0

        /// Compute Z-offset from anchor and base positions
        /execute store result score @s x_R0 run data get entity @s Pos[2] 1000000
        /scoreboard players operation @s x_R0 -= @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R2
        /scoreboard players operation @s x_ATTACH_Z = @s x_R0
    }     



    /// If some time has passed without scroll,
    if('score @s x_SEAT_TICK matches 140..'){


        /// If prompts are on,
        if('data storage x_seat flags{showPrompts:1}') { 
         
            /// Tag player for C.O.R.E to clear action-bar prompt          
            /tag @s add x_CLEAR_ABTITLE

            /// Request C.O.R.E action-bar clear
            /data modify storage x_core flags merge value {clearABTitle:1}  
        }


        /// As all seat anchors with seat ID matching player,
        asat('@e[tag=x_SEAT_NS,tag=x_SEAT_ANCHOR]'), if('score @s x_SEAT_ID = @a[tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_EID'){

            /// Get player rotation
            /execute store result score @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R0 run data get entity @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] Rotation[0] 10
            
            /// Get anchor rotation        
            /execute store result score @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R1 run data get entity @s Rotation[0] 10
            
            /// Calculate difference between player and anchor rotation as new rotation offset
            /scoreboard players operation @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R0 -= @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R1

            /// Remove adjusting tag from anchor
            /tag @s remove x_SEAT_ANCHOR_ADJUSTING
        }  


        /// As all seat bases with seat ID matching player,
        asat('@e[tag=x_SEAT_NS,tag=x_SEAT_PLAYER_BASE,limit=1,sort=nearest]'){

            /// Apply new rotation offset to base
            /scoreboard players operation @s x_ATTACH_RY = @a[tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP,limit=1,sort=nearest] x_R0

            /// Restore attachment tag
            /tag @s add x_ATTACH_ROTATE
        }  


        /// Remove seat adjusting tag
        /tag @s remove x_ADJUSTING_SEAT
    }


    /// Advance player seat clock by 1 tick
    /scoreboard players add @s x_SEAT_TICK 1

    /// Remove player tag from its base
    /tag @e remove x_SEAT_PLAYER_BASE

    /// Skip this player and iterate over other adjusters
    /tag @s[tag=x_ADJUSTING_SEAT] add x_ADJUSTING_SEAT_SKIP
}



/// If all adjusters checked, reset skip tags
if(!'entity @a[tag=x_SEAT_NS,tag=x_ADJUSTING_SEAT,tag=!x_ADJUSTING_SEAT_SKIP]'){
    /tag @a remove x_ADJUSTING_SEAT_SKIP
}





/// As player tagged seated, but not mounted on a seat (players who just dismounted)
asat('@a[tag=x_SEAT_NS,tag=x_SEATED,nbt=!{RootVehicle:{Entity:{Tags:[x_SEAT_NS,x_SEAT_OCCUPIED,x_SEAT_BASE]}}},limit=1]'){
    

    /// Tag as being unseated
    /tag @s add x_UNSEATING


    /// As all seat bases with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=x_SEAT_OCCUPIED,tag=x_SEAT_BASE]'), if('score @s x_SEAT_ID = @a[tag=x_UNSEATING,limit=1,sort=nearest] x_EID'){
   
        /// Eject the surface riding this base
        /tp @e[tag=x_SEAT_NS,tag=x_SEAT_OCCUPIED,tag=x_SEAT_SURFACE,limit=1,distance=..1,sort=nearest] ~ ~0.5 ~

        /// Tag and schedule for disposal
        /tag @s add x_KILL_SEAT
        /schedule function x_seat:kill_seat 2t

        /// Remove occupied tag
        /tag @s remove x_SEAT_OCCUPIED
    }

    /// As all seat surfaces with seat ID matching player,
    asat('@e[tag=x_SEAT_NS,tag=x_SEAT_OCCUPIED,tag=x_SEAT_SURFACE]'), if('score @s x_SEAT_ID = @a[tag=x_UNSEATING,limit=1,sort=nearest] x_EID'){
   
        /// Teleport player to a safe height above seat
        // /tp @a[tag=x_UNSEATING,limit=1,sort=nearest] ~ ~1.5 ~

        /// If not already tagged for disposal
        if(!'entity @s[tag=x_KILL_SEAT]'){

            /// Dispose
            /schedule function x_seat:kill_seat 2t

            /// Tag for disposal
            /tag @s add x_KILL_SEAT
        }

        /// Remove occupied tag
        /tag @s remove x_SEAT_OCCUPIED
    }


    /// Remove potential adjuster tag (if any)
    /tag @s remove x_MAY_ADJUST_SEAT

    /// Remove seat adjusting tag (if any)
    /tag @s remove x_ADJUSTING_SEAT


    /// Reset seat scroll tracking register
    /scoreboard players reset @s x_SEAT_SCROLLED


    /// If scrollbar user tag was added by this pack
    if('entity @s[tag=x_SCROLLBAR__SEAT]'){

        /// Unqueue scrollbar tag
        /scoreboard players remove @s x_SCROLLBAR__T 1

        /// Remove seat scrollbar user 'added by seat' tag
        /tag @s remove x_SCROLLBAR__SEAT
    }    


    /// If EID tag was added by this pack
    if('entity @s[tag=x_EID__SEAT]'){

        /// Unqueue EID tag
        /scoreboard players remove @s x_EID__T 1

        /// Remove seat EID 'added by seat' tag
        /tag @s remove x_EID__SEAT
    }


    /// Reset player seat clock
    /scoreboard players reset @s x_SEAT_TICK

    /// Remove 'unseating' tag
    /tag @s remove x_UNSEATING


    /// If prompts are on,
    if('data storage x_seat flags{showPrompts:1}') { 

        /// Tag player for C.O.R.E to clear action-bar prompt (if any)   
        /tag @s add x_CLEAR_ABTITLE

        /// Request C.O.R.E action-bar clear
        /data modify storage x_core flags merge value {clearABTitle:1}  
    }


    /// Remove 'seated' tag
    /tag @s remove x_SEATED
}