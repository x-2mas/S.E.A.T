
#
#
# S.E.A.T | seat_base
# Handles S.E.A.T base tasks
#
#




/// Tag whether sit-down-only
if('data storage x_seat flags{onlySitDown:0}'){
    /tag @s remove x_SEAT_BASE_ENABLED_FORCE_SIT_DOWN
}

if('data storage x_seat flags{onlySitDown:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=!x_SEAT_ENABLED_FORCE_SIT_DOWN,limit=1,sort=nearest]'){
    /tag @s remove x_SEAT_BASE_ENABLED_FORCE_SIT_DOWN
}

if('data storage x_seat flags{onlySitDown:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=x_SEAT_ENABLED_FORCE_SIT_DOWN,limit=1,sort=nearest]'){
    /tag @s add x_SEAT_BASE_ENABLED_FORCE_SIT_DOWN
}

if('data storage x_seat flags{onlySitDown:2}'){
    /tag @s add x_SEAT_BASE_ENABLED_FORCE_SIT_DOWN
}




/// Tag whether physics
if('data storage x_seat flags{physics:0}'){
    /tag @s add x_SEAT_BASE_DISABLED_PHYSICS
}

if('data storage x_seat flags{physics:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=!x_SEAT_DISABLED_PHYSICS,limit=1,sort=nearest]'){
    /tag @s remove x_SEAT_BASE_DISABLED_PHYSICS
}

if('data storage x_seat flags{physics:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=x_SEAT_DISABLED_PHYSICS,limit=1,sort=nearest]'){
    /tag @s add x_SEAT_BASE_DISABLED_PHYSICS
}

if('data storage x_seat flags{physics:2}'){
    /tag @s remove x_SEAT_BASE_DISABLED_PHYSICS
}




/// Tag whether bouncing off floors
if('data storage x_seat flags{bounceOffFloor:0}'){
    /tag @s remove x_SEAT_BASE_ENABLED_FLOOR_BOUNCE
}

if('data storage x_seat flags{bounceOffFloor:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=!x_SEAT_ENABLED_FLOOR_BOUNCE,limit=1,sort=nearest]'){
    /tag @s remove x_SEAT_BASE_ENABLED_FLOOR_BOUNCE
}

if('data storage x_seat flags{bounceOffFloor:1}' && 'entity @e[tag=x_SEAT_BASE_PLAYER,tag=x_SEAT_ENABLED_FLOOR_BOUNCE,limit=1,sort=nearest]'){
    /tag @s add x_SEAT_BASE_ENABLED_FLOOR_BOUNCE
}

if('data storage x_seat flags{bounceOffFloor:2}'){
    /tag @s add x_SEAT_BASE_ENABLED_FLOOR_BOUNCE
}




/// If seat has exceeded its time-out 
if('score @s x_TICK matches 40..'){

    /// If not already tagged for disposal
    if(!'entity @s[tag=x_KILL_SEAT]'){

        /// Dispose
        /schedule function x_seat:kill_seat 2t

        /// Tag for disposal
        /tag @s add x_KILL_SEAT
    }
}


/// If not already tagged for disposal
if(!'entity @s[tag=x_KILL_SEAT]'){

    /// If no player with matching EID found,
    if(!'entity @a[tag=x_SEAT_BASE_PLAYER]'){
        
        /// Dispose
        /schedule function x_seat:kill_seat 2t

        /// Tag for disposal
        /tag @s add x_KILL_SEAT
    }

    /// If no surface with matching EID found,
    if(!'entity @e[tag=x_SEAT_BASE_SURFACE]'){
        
        /// Dispose
        /schedule function x_seat:kill_seat 2t
        
        /// Tag for disposal
        /tag @s add x_KILL_SEAT
    }

    /// If entity is leashed,
    if('entity @s[nbt={Leash:{}}]'){
        
        /// Dispose
        /schedule function x_seat:kill_seat 2t
        
        /// Tag for disposal
        /tag @s add x_KILL_SEAT
    }
}



/// If seat physics is on, seat is anchored and isn't falling,
if('entity @s[tag=!x_SEAT_BASE_DISABLED_PHYSICS]' && 'entity @s[tag=x_SEAT_ANCHORED,tag=!x_SEAT_FALLING]') {

    /// If no matching anchor found,
    if(!'entity @e[tag=x_SEAT_BASE_ANCHOR]'){     

        /// If not already tagged for disposal
        if(!'entity @s[tag=x_KILL_SEAT]'){

            /// Dispose
            /schedule function x_seat:kill_seat 2t

            /// Tag for disposal
            /tag @s add x_KILL_SEAT
        }
    }
}



/// Keep S.E.A.T Base (Fox) facing vertically straight
/data modify entity @s Rotation[1] set value 0

/// Keep S.E.A.T Base (Fox) asleep and cancels any glowing effects
/// (Alternative to [NoAI] tag that keeps mob frozen but responsive to world physics)
/data modify entity @s {} merge value {Sleeping:1,Glowing:0}    



/// If not tagged as occupied, but seat player is seated on this base, 
if('entity @s[tag=!x_SEAT_OCCUPIED]' && 'entity @a[tag=x_SEAT_BASE_PLAYER,tag=!x_SEATED,nbt={RootVehicle: {Entity:{Tags:[x_SEAT_NS,x_SEAT_BASE]}}},nbt=!{RootVehicle: {Entity:{Tags:[x_SEAT_BASE_SKIP]}}}]'){ 
    
    /// Tag as seating the player
    /tag @s add x_SEAT_SEATING
}

/// If tagged as seating, 
if('entity @s[tag=x_SEAT_SEATING]'){


    /// Prevent seat from being killed (by auto-kill timeout)
    /tag @s remove x_KILL_SEAT     
    
    /// Tag player with S.E.A.T namespace
    /tag @a[tag=x_SEAT_BASE_PLAYER,limit=1,sort=nearest] add x_SEAT_NS

    /// Tag player as seated
    /tag @a[tag=x_SEAT_BASE_PLAYER,limit=1,sort=nearest] add x_SEATED

    /// Give advancement to first-time sitters
    /advancement grant @a[tag=x_SEAT_BASE_PLAYER,limit=1,sort=nearest] only x_seat:take_a_seat



    /// Force positioning (in case of tp-lag)
    positioned('as @s'){

        /// If 'only sit down' option is disabled
        if('entity @s[tag=!x_SEAT_BASE_ENABLED_FORCE_SIT_DOWN]'){


            /// If the block directly behind player or the block above that is non-solid/snow, 
            /// Accounting for anchor positioning at (^ ^1.9 ^-0.2), checks blocks (^ ^1.9 ^-0.7) & (^ ^2.9 ^-0.7)
            if('block ^ ^1.9 ^-0.7 #x_core:non_solids' || 'block ^ ^2.9 ^-0.7 #x_core:non_solids' || 'block ^ ^1.9 ^-0.7 minecraft:snow' || 'block ^ ^2.9 ^-0.7 minecraft:snow'){
                
                /// Tag as sit back
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_SIT_BACK
                /tag @s add x_SEAT_SIT_BACK
            } 
        }

    
        /// If tagged as sit back
        if('entity @s[tag=x_SEAT_SIT_BACK]'){

            /// Teleport seat half a block backward and half a block down
            /tp @s ^ ^-0.5 ^-0.5

        /// If not tagged as sit back
        } else {

            /// Teleport seat half a block down
            /tp @s ^ ^-0.5 ^
        }


        /// If sitting back and block above and behind player is a solid
        if('entity @s[tag=x_SEAT_SIT_BACK]' && !'block ^ ^3.9 ^-0.5 #x_core:non_solids' && !'block ^ ^3.9 ^-0.5 minecraft:snow') {

            /// Tag as low roof
            /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_LOW_ROOF
            /tag @s add x_SEAT_LOW_ROOF
        }

        /// If sitting down and block above player is a solid
        if('entity @s[tag=!x_SEAT_SIT_BACK]' && !'block ^ ^3.9 ^ #x_core:non_solids' && !'block ^ ^3.9 ^ minecraft:snow') {

            /// Tag as low roof
            /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_LOW_ROOF
            /tag @s add x_SEAT_LOW_ROOF
        }

        /// If sitting back
        if('entity @s[tag=x_SEAT_SIT_BACK]'){

            /// If block behind player is non-solid/snow
            if('block ^ ^1.9 ^-0.5 #x_core:non_solids' || 'block ^ ^1.9 ^-0.5 minecraft:snow') {

                /// Tag as on floor
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_ON_FLOOR
                /tag @s add x_SEAT_ON_FLOOR
            }

            /// If block behind player is a semi-solid, half-height or below
            if('block ^ ^1.9 ^-0.5 #x_seat:half_height') {

                /// Tag as half-height
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_HALF_HEIGHT
                /tag @s add x_SEAT_HALF_HEIGHT
            }
        }

        /// If sitting down and block at player is a non-solid/semi-solid
        if('entity @s[tag=!x_SEAT_SIT_BACK]') {
            
            /// If block at player is non-solid/snow
            if('block ^ ^1.9 ^ #x_core:non_solids' || 'block ^ ^1.9 ^ minecraft:snow') {

                /// Tag as on floor
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_ON_FLOOR
                /tag @s add x_SEAT_ON_FLOOR
            }

            /// If block at player is a semi-solid, half-height or below
            if('block ^ ^1.9 ^-0.5 #x_seat:half_height') {

                /// Tag as half-height
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_HALF_HEIGHT
                /tag @s add x_SEAT_HALF_HEIGHT
            }
        }
    
    
        /// If tagged as low roof but on floor
        if('entity @s[tag=x_SEAT_LOW_ROOF,tag=!x_SEAT_ON_FLOOR]'){

            /// Teleport seat 3/4 of a block higher 
            /// Seat surface spawn position (relative to player feet)       (^ ^0.5 ^)                  =>  0.5 blocks above feet
            /// Position after this tp                                      (^ ^1.3 ^)                  =>  1.5 blocks above feet
            /tp @s ^ ^0.8 ^
        }

        /// If tagged as half-height
        if('entity @s[tag=x_SEAT_HALF_HEIGHT]'){

            /// Teleport seat 1/2 block higher 
            /// Seat surface spawn position (relative to player feet)       (^ ^0.5 ^)                  =>  0.5 blocks above feet
            /// Position after this tp                                      (^ ^1 ^)                    =>  1 block above feet
            /tp @s ^ ^0.6 ^
        }

        /// If not tagged as low roof nor on floor nor half-height
        if('entity @s[tag=!x_SEAT_LOW_ROOF,tag=!x_SEAT_ON_FLOOR,tag=!x_SEAT_HALF_HEIGHT]'){

            /// Teleport seat 1 block higher 
            /// Seat surface spawn position (relative to player feet)       (^ ^0.5 ^)                  =>  0.5 blocks above feet
            /// Position after this tp                                      (^ ^1.5 ^)                  =>  1.5 blocks above feet
            /tp @s ^ ^1 ^
        }



        /// If there is a solid block too close to the player's back, 
        if(!'block ^ ^1.9 ^-0.6 #x_core:non_solids' && !'block ^ ^1.9 ^-0.6 #x_core:semi_solids' && !'block ^ ^1.9 ^-0.6 minecraft:snow'){
            
            /// Tag as too close
            /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_TOO_CLOSE
            /tag @s add x_SEAT_TOO_CLOSE
        }
    
        /// If tagged as too close
        if('entity @s[tag=x_SEAT_TOO_CLOSE]'){

            /// Teleport seat slightly forward (to prevent clipping)
            /tp @s ^ ^ ^0.3
        }



        /// If not in a cramped location
        if('entity @s[tag=!x_SEAT_LOW_ROOF,tag=!x_SEAT_TOO_CLOSE]'){
            
            /// If block at player is a fence or wall
            if('block ^ ^1.4 ^ #minecraft:fences' || 'block ^ ^1.4 ^ #minecraft:fence_gates' || 'block ^ ^1.4 ^ #minecraft:walls') {

                /// Tag as on fence
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_ON_FENCE
                /tag @s add x_SEAT_ON_FENCE
            }
        }
    
        /// If tagged as on a fence/wall
        if('entity @s[tag=x_SEAT_ON_FENCE]'){

            /// Teleport half a block higher 
            /tp @s ^ ^0.5 ^
        }


        /// Add a ride skip tag to the seated player
        /// Prevents seat from riding player 
        /tag @a[tag=x_SEAT_BASE_PLAYER,limit=1,sort=nearest] add x_SEAT_NO_RIDE


        /// If sitting back and on the floor,
        positioned('^ ^ ^-0.5'), if('entity @s[tag=x_SEAT_SIT_BACK,tag=!x_SEAT_LOW_ROOF,tag=!x_SEAT_ON_FENCE,tag=x_SEAT_ON_FLOOR]') {
            
            /// If there's a rideable entity whose hitbox is at the player,
            if('entity @e[dy=2.9,tag=!x_SEAT,tag=!x_SEAT_ANCHOR,tag=!x_SEAT_SENSOR,tag=!x_SEAT_NO_RIDE,type=!#x_seat:non_rideables]'){
                
                /// Tag as on ride
                /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_ON_RIDE
                /tag @s add x_SEAT_ON_RIDE
            }
        }
    
        /// If tagged as on ride
        if('entity @s[tag=x_SEAT_ON_RIDE]'){

            /// Teleport one block higher
            /tp @s ^ ^1 ^
        }


        /// If not anchored,
        if('entity @s[tag=!x_SEAT_ANCHORED]'){

            /// Run C.O.R.E attachment creation
            /function x_seat:create_anchor

            /// Tag seat for attachment to anchor
            /tag @s add x_ATTACH
            /tag @s add x_ATTACH_ROTATE

            /// Tag seat as anchored
            /tag @s add x_SEAT_ANCHORED
        }
    }
    
    
    /// Tag base as occupied
    /tag @s add x_SEAT_OCCUPIED

    /// Reset kill-timeout (disable)
    /scoreboard players reset @s x_TICK

    /// Tag surface as occupied
    /tag @e[tag=x_SEAT_BASE_SURFACE,limit=1,sort=nearest] add x_SEAT_OCCUPIED

    /// Remove no-ride tag from the player (no longer needed)
    /tag @a[tag=x_SEAT_BASE_PLAYER,limit=1,sort=nearest] remove x_SEAT_NO_RIDE

    /// Remove seating tag
    /tag @s remove x_SEAT_SEATING
} 



/// If occupied,
if('entity @s[tag=x_SEAT_OCCUPIED]') {

    
    /// If seat player is not seated on this seat
    if(!'entity @a[tag=x_SEAT_BASE_PLAYER,nbt={RootVehicle:{Entity:{Tags:[x_SEAT_NS,x_SEAT_OCCUPIED,x_SEAT_BASE]}}},nbt=!{RootVehicle:{Entity:{Tags:[x_SEAT_BASE_SKIP]}}}]'){

        /// If not already tagged for disposal
        if(!'entity @s[tag=x_KILL_SEAT]'){

            /// Dispose
            /schedule function x_seat:kill_seat 2t

            /// Tag for disposal
            /tag @s add x_KILL_SEAT
        }
    }


    /// If S.E.A.T physics enabled,
    if('entity @s[tag=x_SEAT_BASE_DISABLED_PHYSICS]'){

        /// Run base physics tasks
        /function x_seat:seat_physics
    }
}
