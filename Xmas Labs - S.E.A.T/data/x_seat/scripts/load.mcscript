
#
#
# S.E.A.T | load
# Loads scoreboard objectives, players, teams, world storage data, etc required by S.E.A.T tasks
# Runs when world loads. Also runs when running the /reload command
#
#



/// Enable this datapack only after C.O.R.E has loaded
/datapack enable x_seat after "file/x_core"

/// Remove the S.E.A.T entry (if added previously) from C.O.R.E packs 
/// Re-added after completing load-checks
/data remove storage x_core packs.x_seat



/// If C.O.R.E CPU registers aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadCPU') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadCPU:1}
}

/// Queue pack for CPU register loading
if(!'data storage x_core flags.loadCPU__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadCPU__Packs append value {x_SEAT:1}
}



/// If C.O.R.E EID registers aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadEIDs') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadEIDs:1}
}

/// Queue pack for EID register loading
if(!'data storage x_core flags.loadEIDs__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadEIDs__Packs append value {x_SEAT:1}
}



/// If C.O.R.E sneak-time registers aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadSneakTimeRegisters') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadSneakTimeRegisters:1}
}

/// Queue pack for sneak-time register loading
if(!'data storage x_core flags.loadSneakTimeRegisters__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadSneakTimeRegisters__Packs append value {x_SEAT:1}
}



/// If C.O.R.E attachment registers aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadAttachmentRegisters') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadAttachmentRegisters:1}
}

/// Queue pack for attachment register loading
if(!'data storage x_core flags.loadAttachmentRegisters__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadAttachmentRegisters__Packs append value {x_SEAT:1}
}



/// If C.O.R.E collision-blocking features aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadCollisionRegisters') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadCollisionRegisters:1}
}

/// Queue pack for collision register loading
if(!'data storage x_core flags.loadCollisionRegisters__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadCollisionRegisters__Packs append value {x_SEAT:1}
}



/// If C.O.R.E scroll-bar registers aren't loaded, request to re-load with them
if(!'data storage x_core flags.loadScrollBarRegisters') {
    /data modify storage x_core flags merge value {reload:1}
    /data modify storage x_core flags merge value {loadScrollBarRegisters:1}
}

/// Queue pack for scroll-bar register loading
if(!'data storage x_core flags.loadScrollBarRegisters__Packs[{x_SEAT:1}]'){
    /data modify storage x_core flags.loadScrollBarRegisters__Packs append value {x_SEAT:1}
}





/// If all the above checks passed successfully,
if(!'data storage x_core flags{reload:1}') {

    /// Add the S.E.A.T pack to the C.O.R.E 'packs' folder
    /data modify storage x_core packs merge value {x_seat:116501} 
} 





/// If S.E.A.T entry in C.O.R.E packs (successfully loaded)
if('data storage x_core packs{x_seat:116501}') {


    /// Reset load notification status
    /data remove storage x_seat flags.loadNotified

    /// Schedule load notifications
    /schedule function x_seat:load_notify 3s


    /// Get the current C.O.R.E version number
    /execute store result score x_CPU x_R0 run data get storage x_core packs.x_core 1

    /// Set the required C.O.R.E version number
    /scoreboard players set x_CPU x_R1 116501

    /// Subtract required version number from current version number
    /scoreboard players operation x_CPU x_R0 -= x_CPU x_R1

    /// If result positive (current version >= required version)
    if(!'score x_CPU x_R0 matches ..-1'){
        
        /// Create 'id' scoreboard register
        /// Used by S.E.A.T to link components
        /scoreboard objectives add x_SEAT_ID dummy "Xmas Labs: S.E.A.T ID Register"

        /// Create 'tick' scoreboard register
        /// Used by S.E.A.T physics anchor as a scoreboard clock
        /scoreboard objectives add x_SEAT_TICK dummy "Xmas Labs: S.E.A.T Tick Register"

        /// Create 'scrolled' scoreboard register
        /// Used in S.E.A.T adjustment to track how player has scrolled 
        /scoreboard objectives add x_SEAT_SCROLLED dummy "Xmas Labs: S.E.A.T Scroll Tracking Register"

        /// Create 'menu' scoreboard register
        /// Used by the S.E.A.T menu to track which page player is looking at 
        /scoreboard objectives add x_SEAT_MENU dummy "Xmas Labs: S.E.A.T Menu Register"


        /// Create the 'flags' folder
        /// Holds current S.E.A.T config and status info
        if(!'data storage x_seat flags'){
            /data modify storage x_seat flags set value {physics:1, rotationLock:0, bounceOffFloor:0, onlySitDown:0, onlyIfSneaking:0, safetyEjects:1, fallDamage:1, blockInventory:1, freezeRideOnAdjust:1, showPrompts:1}
        }
    }
} 







